{"name":"Snap","tagline":"Snap simplifies building projects with C++/Python/Java targets","body":"CMake SNAP\r\n===================\r\n*Author: Kyle Heath (cmakesnap [at] gmail)*\r\n\r\n[![Build Status](https://travis-ci.org/cmakesnap/snap.png)](https://travis-ci.org/cmakesnap/snap)\r\n\r\nWhat is CMake SNAP?\r\n-------------------------------------------------------------------------------\r\n\r\n* A system for building software for projects with C/C++/Python/Java targets\r\n* Makes CMakeLists.txt files very concise\r\n* Provides a notion of reusable packages \r\n* Transparently manages package dependencies \r\n\r\nCurrently supported targets: \r\n* CPP_BINARY - Optional mark as a test target\r\n* CPP_LIBRARY - Optional SWIG python bindings\r\n* PROTO_LIBRARY - Generates C++, Python, and Java libraries for a .proto file  \r\n* PYTHON_BINARY - Optional mark as a test target\r\n \r\n   \r\nInstallation\r\n---------------\r\n\r\n1. Get the code.\r\n    * git clone git://github.com/cmakesnap/snap.git \r\n    * https://github.com/cmakesnap/snap/archive/master.zip\r\n2. Run the ./install.py script in the project root to install dependencies (cmake, protobuf, swig)\r\n3. Add the following snippet to your ~/.bashrc \r\n\r\n```bash\r\n# Tell CMake about the snap extensions\r\nexport cmakesnap_DIR=<snap_dir>\r\n\r\n# Adds handy command to toggle between corresponding locations in source and\r\n# and build directory tree with the command 'snap-toggle'\r\nalias snap-toggle='cd `${cmakesnap_DIR}/internal/util/snap-toggle.py`'\r\n```\r\n\r\n4. Run the ./run_tests.sh to build the example projects (start here for examples)\r\n\r\nGetting Started\r\n-------\r\n* See the examples directory\r\n\r\n\r\n\r\n\r\nDesign\r\n---------------\r\nSnap aims to make building software from reusable components as easy as snapping\r\ntogether Lego building blocks.  Traditional build tools require verbose \r\nspecifications of system installed and custom library resources and their \r\ndependencies which requires significant overhead for each component reused and\r\nmake it more difficult for others to build the same software in a different \r\ncomputer environment.  Snap allows users to write very concise specifications \r\nof the desired build targets and reuse components via a simple unique package \r\nname scheme.  Snap makes it easier to build all of a target’s dependencies from \r\nsource distributed with the project which eliminates many problems caused by \r\nvariations in system installed libraries among various operating systems.  \r\nThis scheme also enables “as-static-as-possible-linking” which is required when \r\ncompiling c/c++ binaries on one system which must be distributed and reliably \r\nrun in another environment.  This is a basic requirement for distributed \r\ncomputing which can be difficult to achieve with conventional build tools.  Snap\r\nis built as a set of macros for the CMake build system which is widely used in \r\nopen source community for its speed, portability, and ease of use.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}