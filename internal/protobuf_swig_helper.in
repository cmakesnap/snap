#ifdef SWIGPYTHON

%include <typemaps.i>
%include <exception.i>
%include <std_string.i>

%{
#include <iostream>
#include <stdio.h>
#include <string>
%}

%define %proto_typemaps(PROTO_MESSAGE_NAME, PROTO_MESSAGE_PYTHON_NAME, PROTO_MESSAGE_PYTHON_MODULE)

%typemap(in) const PROTO_MESSAGE_NAME& (PROTO_MESSAGE_NAME temp){
  if (!PyObject_HasAttrString($input, "SerializeToString")){
    char msg[512];
    snprintf(msg, sizeof(msg), "Input argument should be a protocol buffer object, but it is %s.", obj0->ob_type->tp_name);
    SWIG_exception(SWIG_RuntimeError, msg);       
  }
  PyObject* py_serialized = PyObject_CallMethod($input, "SerializeToString", "");   
  if (!py_serialized) {
    char msg[512];
    snprintf(msg, sizeof(msg), "Failed to serialize message of type %s (probably missing required fields).", obj0->ob_type->tp_name);
    SWIG_exception(SWIG_RuntimeError, msg);
  }
  char *buffer;
  Py_ssize_t length; 
  PyString_AsStringAndSize(py_serialized, &buffer, &length);  
  if (!temp.ParseFromArray(buffer, length)){ // if this fails, you probably have a mismatch in proto types
    char msg[512];
    snprintf(msg, sizeof(msg), "Expected protocol buffer of type PROTO_MESSAGE_NAME but got one of type %s.", obj0->ob_type->tp_name);
    SWIG_exception(SWIG_RuntimeError, msg);
  }      
  temp.CheckInitialized();
  $1 = &temp;
}

%typemap(in,numinputs=0) PROTO_MESSAGE_NAME* (PROTO_MESSAGE_NAME temp) {
   $1 = &temp;
}

%typemap(argout) PROTO_MESSAGE_NAME* (PROTO_MESSAGE_NAME temp) {  
  PyObject* mod = PyImport_ImportModule("PROTO_MESSAGE_PYTHON_MODULE");  
  if (!mod){
    SWIG_exception(SWIG_RuntimeError, "Failed to load python module: PROTO_MESSAGE_PYTHON_MODULE");
  }
  PyObject* instance = PyObject_CallMethod(mod, "PROTO_MESSAGE_PYTHON_NAME", "()");
    
  if (!instance){
    SWIG_exception(SWIG_RuntimeError,"Failed to create PROTO_MESSAGE_PYTHON_NAME");
  }
  
  if(!PyObject_HasAttrString(instance, (char *)"ParseFromString")){
    SWIG_exception(SWIG_RuntimeError,"Failed to create PROTO_MESSAGE_PYTHON_NAME");
  }    
  
  std::string s = $1->SerializeAsString();
  
  // NOTE: must use the (s#) format string and length delimiated format because string itself may contain null which screws up parsing
  // when using the null terminated parsing convention of just (s) format string.
  PyObject* res = PyObject_CallMethod(instance, "ParseFromString", "(s#)", s.c_str(), s.size());
  if (!res){
    PyErr_Print();
  }
  else{  
    Py_DECREF(res);
    $result = SWIG_Python_AppendOutput($result, instance);
  }
}

%enddef    /* %proto_typemaps() macro */

@TYPEMAP_MACRO_CALLS@

#endif  // SWIGPYTHON

